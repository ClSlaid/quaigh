//! IO for test patterns

use std::io::Write;

/// Write multiple sequential test patterns to a file
pub fn write_patterns<W: Write>(w: &mut W, patterns: &Vec<Vec<Vec<bool>>>) {
    writeln!(w, "* Test pattern file").unwrap();
    writeln!(w, "* generated by quaigh").unwrap();
    for (i, v) in patterns.iter().enumerate() {
        write!(w, "{}:", i).unwrap();
        for seq_pattern in v {
            write!(w, " ").unwrap();
            for inp_value in seq_pattern {
                write!(w, "{}", if *inp_value { "1" } else { "0" }).unwrap();
            }
        }
        writeln!(w).unwrap();
    }
}

mod test {

    #[test]
    fn test_simple_pattern() {
        use super::write_patterns;
        use std::io::BufWriter;

        let example = vec![
            vec![vec![false, true], vec![true, false]],
            vec![vec![true, true]],
        ];
        let mut buf = BufWriter::new(Vec::new());
        write_patterns(&mut buf, &example);
    }
}
